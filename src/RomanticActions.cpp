// RomanticActions.cpp
#include "RomanticActions.h"
#include <iostream>
using std::cin;

// Defina os emojis correspondentes √†s a√ß√µes
const string EMOJI_PIADA = "üòÑ";
const string EMOJI_CANTADA = "üòç";
const string EMOJI_CONVERSA = "üí¨";
const string EMOJI_BEIJO = "üòò";


// Construtor padr√£o
RomanticActions::RomanticActions() 
: StoriesRelationship(), relationshipStatus("N√£o definido"),pair("")
{

}

// Construtor parametrizado
RomanticActions::RomanticActions(const StoriesRelationship& storiesRelationship, const string& pair)
: StoriesRelationship(storiesRelationship), pair(pair), relationshipStatus("N√£o definido"), UPCAP(50)
{

}

// Construtor de c√≥pia
RomanticActions::RomanticActions(const RomanticActions& other)
: StoriesRelationship(other), pair(other.pair), relationshipStatus(other.relationshipStatus), UPCAP(other.UPCAP) {}

// Destrutor
RomanticActions::~RomanticActions() {}


// Operador de atribui√ß√£o
RomanticActions& RomanticActions::operator=(const RomanticActions& other) {
    if (this != &other) {
        *static_cast< StoriesRelationship * >( this ) = static_cast< StoriesRelationship >( other );	
        pair = other.pair;
        relationshipStatus = other.relationshipStatus;
    }
    return *this;
}

// Operador de compara√ß√£o de igualdade
bool RomanticActions::operator==(const RomanticActions& other) const {
    return (static_cast< StoriesRelationship >( *this ) == static_cast< StoriesRelationship >( other )&&
           pair == other.pair &&
           relationshipStatus == other.relationshipStatus);
}

// Operador de compara√ß√£o de desigualdade
bool RomanticActions::operator!=(const RomanticActions& other) const {
    return !(*this == other);
}

// Operador l√≥gico de nega√ß√£o
bool RomanticActions::operator!() const {
    return pair=="";
}

// M√©todo para iniciar um evento rom√¢ntico
void RomanticActions::startEvent(Sims* sim) {
    int points = 0;
    if (sim->getNome() != pair){
        resetParte();// reinicia os cap√≠tulos caso necess√°rio; 
        pair = sim->getNome();
        cout<<getSimInvolved()<<" ‚ù§Ô∏è "<<pair<<"\n";
    }
    while (true) {
        // Exibir menu de a√ß√µes
        cout<<"\n+----------------------------------------+\n";
        cout << "Menu de A√ß√µes:\n";
        cout << "1. Contar piada paqueradora " << EMOJI_PIADA << "\n";
        cout << "2. Dar cantada em " << EMOJI_CANTADA << "\n";
        cout << "3. Ficar de conversa fiada " << EMOJI_CONVERSA << "\n";
        cout << "4. Beijar " << EMOJI_BEIJO << "\n";
        cout << "-1. Finalizar o evento\n";

        int choice;
        cout << "Insira a a√ß√£o que deseja executar:";
        cin >> choice;

        if (choice == -1) {
            break; // Finalizar o evento
        }

        // Executar a√ß√£o escolhida
        switch (choice) {
            case PIADA:
                // Simular a√ß√£o entre sims e subtrair energia
                // Adicionar pontos de evento
                points += 10;
                cout << "Executando a√ß√£o: Contar piada paqueradora " << EMOJI_PIADA << "\n";
                break;
            case CANTADA:
                // Simular a√ß√£o entre sims e subtrair energia
                // Adicionar pontos de evento
                points += 10;
                cout << "Executando a√ß√£o: Dar cantada em " << EMOJI_CANTADA << "\n";
                break;
            case CONVERSA:
                // Simular a√ß√£o entre sims e subtrair energia
                // Adicionar pontos de evento
                points += 10;
                cout << "Executando a√ß√£o: Ficar de conversa fiada " << EMOJI_CONVERSA << "\n";
                break;
            case BEIJO:
                // Simular a√ß√£o entre sims e subtrair energia
                // Adicionar pontos de evento
                points += 10;
                cout << "Executando a√ß√£o: Beijar " << EMOJI_BEIJO << "\n";
                break;
            default:
                cout << "Escolha inv√°lida. Tente novamente.\n";
        }

        cout<<"\nPontos de evento:  ‚≠ê "<<points<<"\n";
        // Verificar se os pontos atingiram o limite
        if (points >= UPCAP) {
            // Incrementar a parte da classe base Stories
            Stories::operator++();
            // Zerar pontos para o pr√≥ximo evento
            points = 0;
            break; // Finalizar o evento
        }
    }
}

// M√©todo para definir o status do relacionamento
void RomanticActions::setRelationshipStatus(const string& status) {
    relationshipStatus = status;
}

// Operador de inser√ß√£o para facilitar a exibi√ß√£o
ostream& operator<<(ostream& out, const RomanticActions& romanticActions) {
    // Chama o operador << da classe base
    out << static_cast<const StoriesRelationship&>(romanticActions);

    // Adiciona informa√ß√µes espec√≠ficas de RomanticActions
    out << "| pair: "<<romanticActions.pair;
    out << "\n| Relationship Status: " <<romanticActions.relationshipStatus<< "\n";

    return out;
}
